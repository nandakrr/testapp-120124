<?php

namespace App\Http\Controllers\booking;

use App\Http\Controllers\Controller; // ON live remove 
use Illuminate\Http\Request;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use App\Traits\CommonTrait;
use Validator;
use Illuminate\Support\Str;
use Session;

class BookingStepController extends Controller
{
    //use CommonTrait;

    protected $activeAuth,$allDates;

    function __construct()
    {
        $this->middleware('bookingauth');
        $this->allDates = [];
       
    }

    public function loadActiveUser()
    {
        $this->activeAuth = Session::get('bookingAuth');
    }

    public function index()
    {
        $this->loadActiveUser();

        $seodata = DB::table('seo_details')->where('page_url','book-session')->first();
        $data['title']   = $seodata->title;
        $data['desc']    = $seodata->description;
        $data['keyword'] = $seodata->keyword;
        $data['service_type'] = [];
        $data['parking_type'] = $this->ParkingTypeList('web');
        $data['active_user'] = $this->activeAuth != null && isset($this->activeAuth[0]['Result']) && !empty($this->activeAuth[0]['Result']) ? $this->activeAuth[0]['Result'] : null;
        session()->put('student_id',$data['active_user']['student_id']);
        session()->put('token',$data['active_user']['token']);
        session()->put('student_email',$data['active_user']['email']);
        session()->put('student_full_naame',$data['active_user']['firstname'].' '.$data['active_user']['lastname']);
        $services_list = $this->initServiceTypeList();
        $address_list = $this->initAddress();

        if($services_list == "tokanmismatch")
        {
            return redirect('booking/session/logout?do=token');
        }

        return view('booking.index',compact('data','address_list','services_list'));
    }


    public function getAddressList() 
    {
        $address_list = $this->initAddress();
        $addressListRender = view('booking.address.list',compact('address_list'))->render();
        $response['address_list_html'] = $addressListRender;
        $response['address_list'] = $address_list;
        $response['status'] = 200;
        return response()->json($response,$response['status']);
    }

    private function initAddress()
    {
        session()->forget('add_list');
        $addPayload = [
            'token' =>  session()->get('token'),
            'student_id' => session()->get('student_id')
        ];

        $getAddressURL = 'https://bigtoe.app/app/ClientSide_V1/getStudentAddress';
        $addList = $this->curlRequestCall('post', $addPayload, $getAddressURL);

        $addListResult = json_decode($addList, true);
        $listAdd =  $addListResult['ResponseCode'] != 0 ? array_column($addListResult['Result'], null, 'student_address_id') : [];
        session()->push('add_list',$listAdd);
        return $listAdd;
    }
    
     /**
     * This Method will use when Address step is active
     * @method : POST using AJAX
     */
    public function addressDetails(Request $request)
    {
        abort_if(!$request->ajax() ,response()->json(['message' => 'Request not allowed.'], 422),422);

        $rules = [
            'student_id'    => 'required',
            'locationtype'  => 'required',
            //'locationname'  => 'required',
            //'residencetype' => 'required',
            //'street_address'=> 'required',
            //'unit_number'   => 'required',
            'city'          => 'required',
            'state'         => 'required',
            'zipcode'       => 'required',
            'country'       => 'required',
            'latitude'      => 'required',
            'longitude'     => 'required',
            'new_token'     => 'required',
            'cats'          => 'required',
            'dogs'          => 'required',
            'parkingtype'   => 'required',
            'parkingfee'    => 'required',
            'stairs'        => 'required',  
        ];

        
        if($request->locationtype == "hotel")
        {
            $rules['locationname'] = 'required';
            $rules['unit_number'] = 'required';
        }
        if($request->locationtype == "residence")
        {
            $rules['residencetype'] = 'required';
        }
        $validator = Validator::make($request->all(),$rules);
        
        if ($validator->fails()) 
        {
            $validain['status'] = 422; 
            $validain['response']['ResponseCode'] = 0;
            $allerror = "";
            foreach($validator->errors()->toArray() as $k => $er)
            {
                $allerror .= $er[0]."\n";
            }
            $validain['messsage'] = $allerror;
            return response()->json($validain,$validain['status']);
        }

        $payload = $request->all();
        $payload['token'] = $request->new_token; 
        $payload['locationtype'] = ucwords($request->locationtype); 
        $payload['residencetype'] = !empty($request->residencetype) ? strtolower($request->residencetype) : null;
        $payload['student_id'] = session()->get('student_id');
        $payload['device_type'] = 'Browser';

        $url = 'https://bigtoe.app/app/ClientSide_V1/saveStudentAddress';
        $res = $this->curlRequestCall('post', $payload, $url);

        $json_result = json_decode($res, true);

        if ($json_result['ResponseMessage'] == 'SUCCESS') 
        {
            $result = $json_result['Result'];
            $address = collect($result);
            
            $response['status'] = 200;
            $response['response'] = $json_result;
            $response['message'] = 'address added successfully.';
        }
        else
        {
            $response['status'] = 422; 
            $response['response']['ResponseCode'] = $json_result['ResponseCode'];
            $response['messsage'] = $json_result['Comments'];
        }
        return response()->json($response,$response['status']);
    }

    public function initServiceTypeList()
    {
        $url = 'https://bigtoe.app/app/ClientSide_V1/getHomeScreen';
        
        $payload = [
            'client_id' => session()->get('student_id'),
            'token' => session()->get('token'),
        ];
        $res = $this->curlRequestCall('POST', $payload, $url);

        $json_result = json_decode($res, true);  
        $skillCategory = [];
        if($json_result['ResponseCode'] == 1)
        {
            $skillCategory = $json_result['Result']['skill_category'];
        }
        if($json_result['ResponseCode'] == 0 && $json_result['Comments'] == "Token Mismatch")
        {
            $skillCategory = "tokanmismatch";
        }
        return $skillCategory;
    }

    /**
     * This Method use for get list of service type 
     */
    public function ServiceTypeList($type="API")
    {
        $skillCategory = $this->initServiceTypeList();
        if($skillCategory)
        {
            $categories = [];
            foreach($skillCategory as $singlecat)
            {
                $service_category_id = $singlecat['service_category_id'];
                $service_category = $singlecat['service_category'];
                $categories[$service_category_id] = $service_category; 
            }
            return response()->json(['ResponseCode' => 1, 'ResponseMessage' => 'SUCCESS', 'Comments' => '', 'status' => 'accepted', 'headline' =>'Extra Time Accepted', 'time_options' => array(), 'text' => $categories], 200);
        }
        return response()->json(['ResponseCode' => 0, 'ResponseMessage' => 'FAILER', 'Comments' => '', 'status' => 'regect', 'time_options' => array(), 'text' => $categories], 200);
    }
	
	

    /**
     * This Method use for get list of child service base on parent services 
     */
    public function ChildServiceTypeList(Request $request,$parent_id)
    {
        abort_if(!$parent_id ,response()->json(['message' => 'Service type is is invalid.'], 422),422);
        
        $url = 'https://bigtoe.app/app/ClientSide_V1/getAllActiveServices'; // todo : change api name TO : getHomeScreen
        
        $payload = [
            'student_id' => session()->get('student_id'),
            'token' => session()->get('token'),
        ];

        //print_r($payload);
        $res = $this->curlRequestCall('POST', $payload, $url);
        
        $json_result = json_decode($res, true);
        //print_r($json_result);
        if($json_result['ResponseCode'] == 1)
        {
            $subCategories = [];

            $skillCategory = $json_result['Result']['skill_category'];
            if($skillCategory)
            {
                // /$serviceType = collect([ 'private_yoga' => 'Private Yoga', 'massage' => 'Massage']);

                foreach($skillCategory as $singlecat)
                {
                    $service_category_id = $singlecat['service_category_id'];
                    $skills = $singlecat['skill'];
                    foreach($skills as $skill)
                    {
                        $skill_id = $skill['skill_id'];
                        $subCategories[$service_category_id][$skill_id] = $skill['name'];
                    }
                }
            }
            $serviceType = collect($subCategories);
            return response()->json(['ResponseCode' => 1, 'ResponseMessage' => 'SUCCESS', 'Comments' => '', 'status' => 'accepted', 'headline' =>'Extra Time Accepted', 'time_options' => array(), 'text' => $serviceType->get($parent_id)], 200);
        }
    }

    /**
     * This Method use for get list of service type 
     */
    public function ParkingTypeList($type="API")
    {
        $serviceType = collect([ 'parking_1' => 'Street', 'parking_2' => 'Lot or Garage', 'parking_3' => 'Valet', 'parking_4' => 'Not Sure']);
        return $type == "API" ? response()->json(['ResponseCode' => 1, 'ResponseMessage' => 'SUCCESS', 'Comments' => '', 'status' => 'accepted', 'headline' =>'Extra Time Accepted', 'time_options' => array(), 'text' => $serviceType->toArray()], 200) : $serviceType->toArray();

        //return response()->json(['status' => 200, 'data' => $serviceType->toArray()], 200);
    }


    /**
     * This Method use for get booking option.
     * @param student_id,cat_id,skill_id,student_address_id
     * @return  DURATION,GENDER,TIME_SLOT
     * 
     * AFTER returned value select other filed will be display
     */
    public function getBookingOptions(Request $request)
    {
        abort_if(!$request->ajax() ,response()->json(['message' => 'Request not allowed.'], 422),422);

        $rules = [
            'student_id'    => 'required',
            'service_category_id'  => 'required',
            'address_id'        => 'required',  
        ];

        $validator = Validator::make($request->all(),$rules);
        
        if ($validator->fails()) 
        {
            $validain['status'] = 422; 
            $validain['response']['ResponseCode'] = 0;
            $allerror = "";
            foreach($validator->errors()->toArray() as $k => $er)
            {
                $allerror .= $er[0]."\n";
            }
            $validain['messsage'] = $allerror;
            return response()->json($validain,$validain['status']);
        }
        $payload = $request->all();
        $payload['student_id'] = session()->get('student_id');
        $payload['token'] =  session()->get('token');
        $payload['number_of_people'] = 1;
        $payload['is_client_included'] = 1;
        $payload['is_couple'] = 0;
        $payload['is_rebook'] = 0;
        $payload['provider_id'] = "";

        session()->put('category_name',$request->service_category_name);
        session()->put('category_id',$request->service_category_id);
        session()->put('student_address_id',$request->address_id);
        session()->put('number_of_people',$payload['number_of_people']);
// print "<pre>";
// print_r(session()->get('add_list'));
        $addSelected = isset(session()->get('add_list')[0][session()->get('student_address_id')]) ? session()->get('add_list')[0][session()->get('student_address_id')] : null;
        $response['add_listt'] = $addSelected != null ? $addSelected['street_address']. ' ' .$addSelected['city']. ' ' .$addSelected['state']. ' ' .$addSelected['zipcode'] : null;
        session()->put('street_address',$response['add_listt']);


        $url = 'https://bigtoe.app/app/ClientSide_V1/getBookingPreferences';
        $res = $this->curlRequestCall('post', $payload, $url);
        $json_result = json_decode($res, true);
        
        if ($json_result['ResponseMessage'] == 'SUCCESS') 
        {
            $result = $json_result['Result'];            
            $durations = $result['duration'];
            $gender = $result['provider_gender'];
        
            $response['status'] = 200;
            //            $response['response'] = $json_result;
            
            session()->put('tooltip_text',$result['tooltip_text']);
            session()->put('cancellation_policy',$result['cancellation_policy']);
            
            $response['message'] = 'address added successfully.'; 
            $response['content']['duration'] = view('booking.booking-preferences.duration',compact('durations'))->render();
            $response['content']['gender']   = view('booking.booking-preferences.gender',compact('gender'))->render();
            $response['category_name']   = session()->get('category_name');
            //$response['content']['time_slots'] = view('booking.booking-preferences.time-slots',compact('finalSlots'))->render();
        }
        else
        {
            $response['status'] = 422; 
            $response['response']['ResponseCode'] = $json_result['ResponseCode'];
            $response['messsage'] = $json_result['Comments'];
        }
        return response()->json($response,$response['status']);
    }


    /**
     * After select durection,gender and skill on next step this method call
     */
    public function getDateOptions(Request $request)
    {
        abort_if(!$request->ajax() ,response()->json(['message' => 'Request not allowed.'], 422),422);

        $rules = [
            'student_id'    => 'required',
            'service_category_id'  => 'required',
            'skill_id'  => 'required',
            'address_id'        => 'required',  
            'duration'        => 'required',  
            'gender'        => 'required',  
        ];

        $validator = Validator::make($request->all(),$rules);
        
        if ($validator->fails()) 
        {
            $validain['status'] = 422; 
            $validain['response']['ResponseCode'] = 0;
            $allerror = "";
            foreach($validator->errors()->toArray() as $k => $er)
            {
                $allerror .= $er[0]."\n";
            }
            $validain['messsage'] = $allerror;
            return response()->json($validain,$validain['status']);
        }
        $payload = $request->all();
        $payload['student_id'] = session()->get('student_id');
        $payload['token'] =  session()->get('token');
        $payload['number_of_people'] = 1;
        $payload['is_client_included'] = 1;
        $payload['is_couple'] = 0;
        $payload['is_rebook'] = 0;
        $payload['provider_id'] = "";
        //$payload['client_list'] = [];

        session()->put('skill_name',$request->skill_name);
        session()->put('skill_id',$request->skill_id);
        session()->put('skill_img',$request->skill_img);
        session()->put('duration',$request->duration);
        session()->put('gender',$request->gender);

        //print_r($payload); die;
        $url = 'https://bigtoe.app/app/ClientSide_V1/getDateOptions';
        $res = $this->curlRequestCall('post', $payload, $url);
        $json_result = json_decode($res, true);
        //print_r($json_result);
        if ($json_result['ResponseMessage'] == 'SUCCESS') 
        {
            session()->forget('all_slot');

            $result = $json_result['Result'];            
            
            $startDate = $result['start_date'];
            $number_dates = $result['number_dates'];
            $summary_text = $result['summary_text'];
            session()->put('summary_text',$summary_text);
            $first_date_times = $result['first_date_times'];
            $first_date['start_time'] = $first_date_times['first_start_time'];
            $first_date['step'] = $first_date_times['slot_length'];
            $first_date['session_duration'] = $first_date_times['session_duration'];
            $first_date['default_window_length'] = $first_date_times['default_window_length'];
            $first_date['end_time'] = $first_date_times['last_finish_time'];

            $second_date_times = $result['second_date_times'];
            $second_date['start_time'] =  $second_date_times['first_start_time'];
            $second_date['step'] =  $second_date_times['slot_length'];
            $second_date['session_duration'] =  $second_date_times['session_duration'];
            $second_date['default_window_length'] =  $second_date_times['default_window_length'];
            $second_date['end_time'] =  $second_date_times['last_finish_time'];

            $remaining_date_times = $result['remaining_date_times'];
            $remaining_date['start_time'] = $remaining_date_times['first_start_time'];
            $remaining_date['step'] = $remaining_date_times['slot_length'];
            $remaining_date['session_duration'] = $remaining_date_times['session_duration'];
            $remaining_date['default_window_length'] = $remaining_date_times['default_window_length'];
            $remaining_date['end_time'] = $remaining_date_times['last_finish_time'];

            $loopStartDate = \Carbon\Carbon::parse($startDate);
            $loopEndDate = \Carbon\Carbon::now()->addDays($number_dates);
            $endDate = $loopEndDate;

            $i=1;
            $timeRanges = [];
            while ($loopStartDate->lte($loopEndDate))
            {
                $dt = $loopStartDate->toDateString();
                if($i == 1)
                {
                    $this->allDates[$dt]['date'] = $dt;
                    $this->allDates[$dt]['start_time'] = $first_date['start_time'];
                    $this->allDates[$dt]['step'] =  $first_date['step'];
                    $this->allDates[$dt]['end_time'] = $first_date['end_time'];
                    $this->allDates[$dt]['session_duration'] = $first_date['session_duration'];
                    $this->allDates[$dt]['default_window_length'] = $first_date['default_window_length'];

                    $timeRanges['star_times'][] = $first_date['start_time'];
                    $timeRanges['end_times'][] = $first_date['end_time'];
                }
                elseif($i == 2)
                {
                    $this->allDates[$dt]['date'] = $dt;
                    $this->allDates[$dt]['start_time'] = $second_date['start_time'];
                    $this->allDates[$dt]['step'] =  $second_date['step'];
                    $this->allDates[$dt]['end_time'] = $second_date['end_time'];
                    $this->allDates[$dt]['session_duration'] = $second_date['session_duration'];
                    $this->allDates[$dt]['default_window_length'] = $second_date['default_window_length'];

                    $timeRanges['star_times'][] = $second_date['start_time'];
                    $timeRanges['end_times'][] = $second_date['end_time'];


                }
                else{
                    $this->allDates[$dt]['date'] = $dt;
                    $this->allDates[$dt]['start_time'] = $remaining_date['start_time'];
                    $this->allDates[$dt]['step'] =  $remaining_date['step'];
                    $this->allDates[$dt]['end_time'] = $remaining_date['end_time'];
                    $this->allDates[$dt]['session_duration'] = $remaining_date['session_duration'];
                    $this->allDates[$dt]['default_window_length'] = $remaining_date['default_window_length'];

                    $timeRanges['star_times'][] = $remaining_date['start_time'];
                    $timeRanges['end_times'][] = $remaining_date['end_time'];
                }

                session::push('all_slot',$this->allDates);
                $loopStartDate->addDay();
                $i++;    
            }
            //date_default_timezone_set("Europe/London");

            $loopStartTime = min($timeRanges['star_times']);
            $loopEndTime = max($timeRanges['end_times']);

            $timeSlots = range(strtotime($loopStartTime),strtotime($loopEndTime),$first_date['step']*60);
            
            $response['content']['date_slider'] = view('booking.booking-details.date-slider',compact('startDate','endDate','number_dates'))->render();
            $response['content']['time_slots'] = view('booking.booking-details.time-slots',compact('timeSlots'))->render();
            $response['summary_text'] = $summary_text;
            $response['status'] = 200;
        }
        else
        {
            $response['status'] = 422; 
            $response['response']['ResponseCode'] = $json_result['ResponseCode'];
            $response['messsage'] = $json_result['Comments'];
        }
        return response()->json($response,$response['status']);
    }

    private function refreshDateOptions()
    {        
        $payload['student_id'] = session()->get('student_id');
        $payload['token'] =  session()->get('token');
        $payload['number_of_people'] = 1;
        $payload['is_client_included'] = 1;
        $payload['is_couple'] = 0;
        $payload['is_rebook'] = 0;
        $payload['provider_id'] = "";

        $payloaad['skill_name']  = session()->get('skill_name');
        $payloaad['skill_id']    = session()->get('skill_id');
        $payloaad['skill_img']   = session()->get('skill_img');
        $payloaad['duration']    = session()->get('duration');
        $payloaad['gender']      = session()->get('gender');

        //print_r($payload); die;
        $url = 'https://bigtoe.app/app/ClientSide_V1/getDateOptions';
        $res = $this->curlRequestCall('post', $payload, $url);
        $json_result = json_decode($res, true);
        if ($json_result['ResponseMessage'] == 'SUCCESS') 
        {
            session()->forget('all_slot');

            $result = $json_result['Result'];            
            
            $startDate = $result['start_date'];
            $number_dates = $result['number_dates'];
            session()->put('summary_text',$result['summary_text']);
            $first_date_times = $result['first_date_times'];
            $first_date['start_time'] = $first_date_times['first_start_time'];
            $first_date['step'] = $first_date_times['slot_length'];
            $first_date['session_duration'] = $first_date_times['session_duration'];
            $first_date['default_window_length'] = $first_date_times['default_window_length'];
            $first_date['end_time'] = $first_date_times['last_finish_time'];

            $second_date_times = $result['second_date_times'];
            $second_date['start_time'] =  $second_date_times['first_start_time'];
            $second_date['step'] =  $second_date_times['slot_length'];
            $second_date['session_duration'] =  $second_date_times['session_duration'];
            $second_date['default_window_length'] =  $second_date_times['default_window_length'];
            $second_date['end_time'] =  $second_date_times['last_finish_time'];

            $remaining_date_times = $result['remaining_date_times'];
            $remaining_date['start_time'] = $remaining_date_times['first_start_time'];
            $remaining_date['step'] = $remaining_date_times['slot_length'];
            $remaining_date['session_duration'] = $remaining_date_times['session_duration'];
            $remaining_date['default_window_length'] = $remaining_date_times['default_window_length'];
            $remaining_date['end_time'] = $remaining_date_times['last_finish_time'];

            $loopStartDate = \Carbon\Carbon::parse($startDate);
            $loopEndDate = \Carbon\Carbon::now()->addDays($number_dates);
            $endDate = $loopEndDate;

            $i=1;
            $timeRanges = [];
            while ($loopStartDate->lte($loopEndDate))
            {
                $dt = $loopStartDate->toDateString();
                if($i == 1)
                {
                    $this->allDates[$dt]['date'] = $dt;
                    $this->allDates[$dt]['start_time'] = $first_date['start_time'];
                    $this->allDates[$dt]['step'] =  $first_date['step'];
                    $this->allDates[$dt]['end_time'] = $first_date['end_time'];
                    $this->allDates[$dt]['session_duration'] = $first_date['session_duration'];
                    $this->allDates[$dt]['default_window_length'] = $first_date['default_window_length'];

                    $timeRanges['star_times'][] = $first_date['start_time'];
                    $timeRanges['end_times'][] = $first_date['end_time'];
                }
                elseif($i == 2)
                {
                    $this->allDates[$dt]['date'] = $dt;
                    $this->allDates[$dt]['start_time'] = $second_date['start_time'];
                    $this->allDates[$dt]['step'] =  $second_date['step'];
                    $this->allDates[$dt]['end_time'] = $second_date['end_time'];
                    $this->allDates[$dt]['session_duration'] = $second_date['session_duration'];
                    $this->allDates[$dt]['default_window_length'] = $second_date['default_window_length'];

                    $timeRanges['star_times'][] = $second_date['start_time'];
                    $timeRanges['end_times'][] = $second_date['end_time'];


                }
                else{
                    $this->allDates[$dt]['date'] = $dt;
                    $this->allDates[$dt]['start_time'] = $remaining_date['start_time'];
                    $this->allDates[$dt]['step'] =  $remaining_date['step'];
                    $this->allDates[$dt]['end_time'] = $remaining_date['end_time'];
                    $this->allDates[$dt]['session_duration'] = $remaining_date['session_duration'];
                    $this->allDates[$dt]['default_window_length'] = $remaining_date['default_window_length'];

                    $timeRanges['star_times'][] = $remaining_date['start_time'];
                    $timeRanges['end_times'][] = $remaining_date['end_time'];
                }

                session::push('all_slot',$this->allDates);
                $loopStartDate->addDay();
                $i++;    
            }
        }
    }


    public function renderTimeBaseDate(Request $request)
    {
        abort_if(!$request->ajax() ,response()->json(['message' => 'Request not allowed.'], 422),422);

        $rules = [
            'selected_date'    => 'required' 
        ];

        $validator = Validator::make($request->all(),$rules);
        
        if ($validator->fails()) 
        {
            $validain['status'] = 422; 
            $validain['response']['ResponseCode'] = 0;
            $allerror = "";
            foreach($validator->errors()->toArray() as $k => $er)
            {
                $allerror .= $er[0]."\n";
            }
            $validain['messsage'] = $allerror;
            return response()->json($validain,$validain['status']);
        }
        $this->refreshDateOptions();
        $selectedDate = $request->selected_date;
        $sessionSlot = session()->get('all_slot');
        
        $lastKey = key(array_slice($sessionSlot, -1, 1, true));
        $allDatesSlots =  $sessionSlot[$lastKey];
        //print_r($allDatesSlots);
        if(isset($allDatesSlots[$selectedDate]))
        {
            //print_r($allDatesSlots[$selectedDate]); 
            //$timeSlots = $allDatesSlots[$selectedDate];
            $loopStartTime = $allDatesSlots[$selectedDate]['start_time'];
            $loopEndTime = $allDatesSlots[$selectedDate]['end_time'];
            $step = $allDatesSlots[$selectedDate]['step'];
            $sessionDuration = $allDatesSlots[$selectedDate]['session_duration'];
            $defaultWindowLength = $allDatesSlots[$selectedDate]['default_window_length'];

            $loopStartTimeSec = explode(":",$loopStartTime);
            $startSecond = (ltrim($loopStartTimeSec[0],0)*60) + $loopStartTimeSec[1];
            $loopEndTimeSec = explode(":",$loopEndTime);
            $endSecond = (ltrim($loopEndTimeSec[0],0)*60) + $loopEndTimeSec[1];

            $timeSlots = range(strtotime($loopStartTime),strtotime($loopEndTime),$step*60);

            $response['content']['time_slots'] = view('booking.booking-details.time-slots',compact('timeSlots'))->render();
            $response['status'] = 200; 
            $response['response']['ResponseCode'] = 1;
            $response['response']['sessionDuration'] = "0".$sessionDuration.":00";
            $response['startSecond'] = $startSecond;
            $response['endSecond'] = $endSecond;
            $response['step'] = (int) $step;
            $response['sessionDuration'] = (int) $sessionDuration;
            $response['messsage'] = $allDatesSlots;
            $response['summary_text'] = session()->get('summary_text');
            $response['default_window_length'] = $defaultWindowLength;

            return response()->json($response,$response['status']);
        }

    }
    

    private function checkSavedCard()
    {
        $payload['student_id'] = session()->get('student_id');
        $payload['token'] =  session()->get('token');

        $url = 'https://bigtoe.app/app/ClientSide_V1/checkSavedCard';
        $res = $this->curlRequestCall('post', $payload, $url);
        $json_result = json_decode($res, true);

        $response['ResponseCode']  = 0;
        if ($json_result['ResponseMessage'] == 'SUCCESS') 
        {
            $result = $json_result['Result'];
            $response['response'] = $result;
            $response['ResponseCode'] = $json_result['ResponseCode'];
            $last4 = isset($result[0]) ?  $result[0]['last4'] : null;
            $response['head_text'] = "Use the card ending with {$last4} to send your booking request? Your card is not being charged.";
            $response['message'] = $json_result['Comments'];
        }
        else
        {
            $response['ResponseCode']  = $json_result['ResponseCode'];
            $response['messsage'] = $json_result['Comments'];
        }
        return $response;
    }

    public function summeryDetails(Request $request)
    {
        abort_if(!$request->ajax() ,response()->json(['message' => 'Request not allowed.'], 422),422);

        $rules = [
            "requested_date"   => "required",
            "requested_time"   => "required",  
            "finish_time"      => "required",  
        ];
        
        $validator = Validator::make($request->all(),$rules);
        
        if ($validator->fails()) 
        {
            $validain['status'] = 422; 
            $validain['response']['ResponseCode'] = 0;
            $allerror = "";
            foreach($validator->errors()->toArray() as $k => $er)
            {
                $allerror .= $er[0]."\n";
            }
            $validain['messsage'] = $allerror;
            return response()->json($validain,$validain['status']);
        }
        $payload = $request->all();
        $payload['student_id'] = session()->get('student_id');
        $payload['token'] =  session()->get('token');
        $payload['service_category_id'] = session()->get('category_id');
        $payload['address_id'] = session()->get('student_address_id');
        $payload['skill_id'] = session()->get('skill_id');
        $payload['requested_date'] = $request->requested_date;
        $payload['skill_id'] = session()->get('skill_id');
        $payload['preferred_gender'] = session()->get('gender');
        $payload['duration'] = session()->get('duration');
        $payload['coupon_code'] = '';
        $payload['number_of_people'] = session()->get('number_of_people');
        $payload['requested_time'] = date("H:i", strtotime($request->requested_time));
        $payload['finish_time'] = date("H:i", strtotime($request->finish_time));


        $date = \Carbon\Carbon::createFromFormat('Y-m-d', $request->requested_date);
        session()->put('requested_date',$date->format('F d'));

        //$requestedDateTime = $request->requested_date.' '.$request->requested_time.':00';

        session()->put('requested_time',$request->requested_time);
        session()->put('finish_time',$request->finish_time);
        session()->put('duration_convert',str_replace("m"," mins",session()->get('duration')));
        session()->put('book_session_record',$payload);
        

        $url = 'https://bigtoe.app/app/ClientSide_V1/priceSession';
        $res = $this->curlRequestCall('post', $payload, $url);
        $json_result = json_decode($res, true);

        if ($json_result['ResponseMessage'] == 'SUCCESS') 
        {
            session()->put('net_cost',0);

            $checkCard = $this->checkSavedCard();
            $isCardSaved = false;
            $cardSavedText = null;
            if( isset($checkCard['ResponseCode']) && $checkCard['ResponseCode'] == 1  )
            {
                $isCardSaved = true;
                $cardSavedText = $checkCard['head_text'];
            }
            $response['is_card_saved'] = $isCardSaved;
            $response['head_text'] = $cardSavedText;

            $result = $json_result['Result'];
            $response['status'] = 200;
            $response['response'] = $result;
            $response['ResponseCode'] = $json_result['ResponseCode'];
            $response['message'] = $json_result['Comments'];
            $prices = $result['price'];
            $netCost = $json_result['net_cost'];
            $parking = $json_result['parking'];
            session()->put('net_cost',$netCost);
            $response['category_name'] = session()->get('category_name');
            $response['skill_name']    = session()->get('skill_name');
            $response['skill_img'] = session()->get('skill_img');
            $response['summary_name']    = session()->get('category_name').' / '.session()->get('skill_name');
            $response['requested_date'] = session()->get('requested_date');
            $response['requested_time'] = session()->get('requested_time');
            $response['finish_time'] = session()->get('finish_time');
            $response['duration'] = session()->get('duration_convert');
            
            $response['street_address'] = session()->get('street_address');
            $response['number_of_people'] = session()->get('number_of_people');
            $response['cancellation_policy'] = session()->get('cancellation_policy');
            $response['content'] = view('booking.summery.summery-details',compact('prices','netCost','parking','isCardSaved','cardSavedText'))->render();
            $response['response']['ResponseCode'] = $json_result['ResponseCode'];
        }
        else
        {
            $response['status'] = 422; 
            $response['response']['ResponseCode'] = $json_result['ResponseCode'];
            $response['messsage'] = $json_result['Comments'];
        }
        return response()->json($response,$response['status']);
    }

    /**
     * THIS METHOD USE FOR FINAL REQUEST
     * If Your will come 1st time OR choose USE DIFF CARD option then this method will call
     */
    public function stripeget(Request $request)
    {
        $rules = [
            "stripeToken"          => "required",
        ];

        $validator = Validator::make($request->all(),$rules);
        
        if ($validator->fails()) 
        {
            $validain['status'] = 422; 
            $validain['response']['ResponseCode'] = 0;
            $allerror = "";
            foreach($validator->errors()->toArray() as $k => $er)
            {
                $allerror .= $er[0]."\n";
            }
            $validain['messsage'] = $allerror;
            return response()->json($validain,$validain['status']);
        }
        
        $stripeToken = $request->stripeToken;

        $payload['student_id'] = session()->get('student_id');
        $payload['token'] =  session()->get('token');
        $payload['customer_token'] =  $stripeToken;
        session()->put('customer_token',$stripeToken);

        $url = 'https://bigtoe.app/app/ClientSide_V1/addCard';
        $res = $this->curlRequestCall('post', $payload, $url);
        $json_result = json_decode($res, true);

        if ($json_result['ResponseMessage'] == 'SUCCESS') 
        {
            $response = $this->bookSessionProcess();
            return redirect('booking/session/thank-you')->with('message', $response['message']);
        }
        else
        {
            $response['status'] = 422; 
            $response['response']['ResponseCode'] = $json_result['ResponseCode'];
            $response['message'] = $json_result['Comments'];
        }
        return redirect('booking/session/thank-you')->with('message', $response['message']);
    }

    /**
     * THIS METHOD USE FOR FINAL REQUEST
     * IF USE CONFIRM for existing card THEN THIS METHOD CALL FOR DO DIRECT BOOK SESSION
     */
    public function bookSession(Request $request)
    {
        abort_if(!$request->ajax() ,response()->json(['message' => 'Request not allowed.'], 422),422);

        $response = $this->bookSessionProcess();
        $response['redirect_url'] = \URL::to('booking/session/thank-you');
        return response()->json($response,$response['status']);
    }

    private function bookSessionProcess()
    {
        $bookSessionRecord = session()->get('book_session_record');
            
        $url = 'https://bigtoe.app/app/ClientSide_V1/bookSession';
        $res = $this->curlRequestCall('post', $bookSessionRecord, $url);
        $bookSessionResult = json_decode($res, true);
        $result = $bookSessionResult['Result'];

        $response['status'] = 200;
        $response['response'] = $bookSessionResult;
        $response['message'] = $bookSessionResult['Comments'];
        //$response['message'] =  "Your request was successful. You can download our mobile apps using the links below. <a href='https://www.bigtoe.yoga/massage'>Click here</a>";
        if( $bookSessionResult['ResponseCode'] == 1)
        {
            $requestId = $result['request_id'];                
            $url = 'https://bigtoe.app/app/ClientSide_V1/getProviders';
            $providerPayload = [
                'student_id' => session()->get('student_id'),
                'request_id' => $requestId,
                'token' => session()->get('token'),
            ];
            $res = $this->curlRequestCall('post', $providerPayload, $url);
        }
        $this->distroyAllSession();
        return $response;
    }

    public function thankYou()
    {
        return view('booking-thank-you');
    }
    
    private function distroyAllSession()
    {
        session()->forget('token');
        session()->forget('student_id');
        session()->forget('student_address_id');
        session()->forget('student_email');
        session()->forget('student_full_naame');
        session()->forget('token');
        session()->forget('requested_date');
        session()->forget('requested_time');
        session()->forget('duration');
        session()->forget('book_session_record');
        session()->forget('category_name');
        session()->forget('skill_name');
        session()->forget('customer_token');
        session()->forget('tooltip_text');
    }

       /**
     * THIS METHOD MANAGE ALL CURL REQUEST FOR THIS CONTROLLER 
     */
    private function curlRequestCall($method = '', $data = '', $url = '')
    {
      if ($method == 'POST' || $method == 'post') 
      {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // $headers = array(
        //     "Content-Type: application/json",
        //  );
        //  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        //for debug only!
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);


        $result = curl_exec($ch);
        curl_close($ch);
        //var_dump($result);
        return $result;
      }

      if ($method == 'PUT' || $method == 'put') 
      {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $headers = array(
            "Content-Type: application/json",
        );
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        //for debug only!
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        $result = curl_exec($ch);
        curl_close($ch);
        //var_dump($result);
        return $result;
      }

      if ($method == 'GET' || $method == 'get') {
          $ch = curl_init($url);
          curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
          // curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

          $result = curl_exec($ch);
          curl_close($ch);
          return $result;
      }
    }


    public function logOut(Request $request)
    {
        $payload['student_id'] = session()->get('student_id');
        $payload['token'] = session()->get('token');

        $url = 'https://bigtoe.app/app/Auth_V1/logout';
        $res = $this->curlRequestCall('post', $payload, $url);
        $json_result = json_decode($res, true);
        
        if ($json_result['ResponseCode'] == 1 && $json_result['ResponseMessage'] == 'SUCCESS') 
        {
            Session::forget('bookingAuth');
            $this->distroyAllSession();

            if( isset($request->do) && $request->do == "token" )
            {
                session()->flash('tokenmismatch','You have been logged out as you logged in on a different device');
               return redirect('booking/signin')->with('tokenmismatch', 'You have been logged out as you logged in on a different device');;
            }
            return redirect('booking/session');
        }

    }

}
